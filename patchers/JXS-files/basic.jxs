<jittershader name="thebookofshaders">
	<description>GL3 stub for thebookofshaders.com</description>
	<param name="jit_position" type="vec3" state="POSITION" />
	<param name="jit_texcoord" type="vec2" state="TEXCOORD" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="u_resolution" type="vec2" state="TEXDIM0" />
	<param name="u_mouse" type="vec2" default="0 0" />
    <param name="u_time" type="float" default="0" />
    <param name="ADSRdata" type="int" default="1" />
    <param name="mode" type="int" default="0" />
    <param name="elements1" type="int" default="4" />
    <param name="elements2" type="int" default="8" />
    <param name="elements3" type="int" default="4" />
    <param name="elements4" type="int" default="4" />
	    
	<param name="layerAngle1" type="float" default="0.0" />
	<param name="layer1enabled" type="bool" default="1" />
	<param name="c1" type="vec4" default="0. 1. 1. 0." />
	<param name="param1_1" type="float" default="0.0" />
	<param name="param1_2" type="float" default="0.0" />
	<param name="param1_3" type="float" default="0.0" />
	<param name="param1_4" type="float" default="0.0" />
	<param name="param1_5" type="float" default="0.0" />
	<param name="param1_6" type="float" default="0.0" />

	<param name="layerAngle2" type="float" default="0.0" />
	<param name="layer2enabled" type="bool" default="1" />
	<param name="c2" type="vec4" default="0. 1. 1. 0." />
	<param name="param2_1" type="float" default="0.0" />
	<param name="param2_2" type="float" default="0.0" />
	<param name="param2_3" type="float" default="0.0" />
	<param name="param2_4" type="float" default="0.0" />
	<param name="param2_5" type="float" default="0.0" />
	<param name="param2_6" type="float" default="0.0" />
	
	<param name="layerAngle3" type="float" default="0.0" />
	<param name="layer3enabled" type="bool" default="1" />
	<param name="c3" type="vec4" default="0. 1. 1. 0." />
	<param name="param3_1" type="float" default="0.0" />
	<param name="param3_2" type="float" default="0.0" />
	<param name="param3_3" type="float" default="0.0" />
	<param name="param3_4" type="float" default="0.0" />
	<param name="param3_5" type="float" default="0.0" />
	<param name="param3_6" type="float" default="0.0" />
	
	<param name="layerAngle4" type="float" default="0.0" />
	<param name="layer4enabled" type="bool" default="1" />
	<param name="c4" type="vec4" default="0. 1. 1. 0." />
	<param name="param4_1" type="float" default="0.0" />
	<param name="param4_2" type="float" default="0.0" />
	<param name="param4_3" type="float" default="0.0" />
	<param name="param4_4" type="float" default="0.0" />
	<param name="param4_5" type="float" default="0.0" />
	<param name="param4_6" type="float" default="0.0" />
	
	<param name="Background" type="vec4" default="0.0 0.0 0.0 0.0" />
	<param name="Time" type="float" default="0.0" />
	<param name="Pvel" type="vec4" state="VERTEX_ATTR" />	
	
	<language name="glsl" version="1.5">
		<bind param="jit_position" program="vp" />
		<bind param="jit_texcoord" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="u_resolution" program="fp" />
		<bind param="u_mouse" program="fp" />
		<bind param="u_time" program="fp" />
		<bind param="ADSRdata" program="fp" />
		<bind param="mode" program="fp" />
		<bind param="elements1" program="fp" />
		<bind param="elements2" program="fp" />
		<bind param="elements3" program="fp" />
		<bind param="elements4" program="fp" />
		
		<bind param="layerAngle1" program="fp" />
		<bind param="layer1enabled" program="fp" />
		<bind param="c1" program="fp" />
		<bind param="param1_1" program="vp" />
		<bind param="param1_2" program="vp" />
		<bind param="param1_3" program="vp" />
		<bind param="param1_4" program="vp" />
		<bind param="param1_5" program="vp" />
		<bind param="param1_6" program="vp" />		
		
		<bind param="layerAngle2" program="fp" />
		<bind param="layer2enabled" program="fp" />
		<bind param="c2" program="fp" />
		<bind param="param2_1" program="vp" />
		<bind param="param2_2" program="vp" />
		<bind param="param2_3" program="vp" />
		<bind param="param2_4" program="vp" />
		<bind param="param2_5" program="vp" />
		<bind param="param2_6" program="vp" />	
		
		<bind param="layerAngle3" program="fp" />
		<bind param="layer3enabled" program="fp" />
		<bind param="c3" program="fp" />
		<bind param="param3_1" program="vp" />
		<bind param="param3_2" program="vp" />
		<bind param="param3_3" program="vp" />
		<bind param="param3_4" program="vp" />
		<bind param="param3_5" program="vp" />
		<bind param="param3_6" program="vp" />

		<bind param="layerAngle4" program="fp" />
		<bind param="layer4enabled" program="fp" />
		<bind param="c4" program="fp" />
		<bind param="param4_1" program="vp" />
		<bind param="param4_2" program="vp" />
		<bind param="param4_3" program="vp" />
		<bind param="param4_4" program="vp" />
		<bind param="param4_5" program="vp" />
		<bind param="param4_6" program="vp" />

		<bind param="Background" program="vp" />
		<bind param="Time" program="vp" />
		<bind param="Pvel" program="vp" />
		
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 jit_position;
in vec2 jit_texcoord;
uniform mat4 textureMatrix0;
uniform mat4 modelViewProjectionMatrix;

uniform vec4 Background;      // constant color equal to background
varying vec4 Color;

out jit_PerVertex {
	vec2 texcoord;	
} jit_out;

void main() {	
	gl_Position = modelViewProjectionMatrix * vec4(jit_position, 1.);	
	jit_out.texcoord = vec2(textureMatrix0*vec4(jit_texcoord, 0., 1.));

	
	

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

#define CNT 16
#define PI 3.1459265358979
#define TWO_PI 6.28318530718
#define TAU PI * 2.0

in jit_PerVertex {
	vec2 texcoord;
} jit_in;

//main color out
//www.khronos.org/opengl/wiki/Layout_Qualifier_(GLSL)
layout (location = 0) out vec4 outColor;


//bookofshaders
uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

uniform sampler2DRect ADSRdata;
uniform int mode;

uniform int elements1;
uniform int elements2;
uniform int elements3;
uniform int elements4;

//track1
uniform float layerAngle1;
uniform bool layer1enabled;
uniform vec4 c1;
uniform float param1_1;				//0.0
uniform float param1_2;				//0.0
uniform float param1_3;				//0.0
uniform float param1_4;				//0.0	
uniform float param1_5;				//0.0
uniform float param1_6;				//0.0	

//track2
uniform float layerAngle2;
uniform bool layer2enabled;
uniform vec4 c2;
uniform float param2_1;				//0.0
uniform float param2_2;				//0.0
uniform float param2_3;				//0.0
uniform float param2_4;				//0.0	
uniform float param2_5;				//0.0
uniform float param2_6;				//0.0	

//track3
uniform float layerAngle3;
uniform bool layer3enabled;
uniform vec4 c3;
uniform float param3_1;				//0.0
uniform float param3_2;				//0.0
uniform float param3_3;				//0.0
uniform float param3_4;				//0.0	
uniform float param3_5;				//0.0
uniform float param3_6;				//0.0	

//track4
uniform float layerAngle4;
uniform bool layer4enabled;
uniform vec4 c4;
uniform float param4_1;				//0.0
uniform float param4_2;				//0.0
uniform float param4_3;				//0.0
uniform float param4_4;				//0.0	
uniform float param4_5;				//0.0
uniform float param4_6;				//0.0	

//FUNCTIONS
//========================================================================================



float plot(vec2 st, float pct){
  return  smoothstep( pct-0.02, pct, st.y) -
          smoothstep( pct, pct+0.02, st.y);
}



//MAIN
//========================================================================================

void main() {

	int animated = 0;
	
	float t;
	
	if(animated == 0){		
		t = fract(u_time / 04.0);
	} else {
		t = 0.0;
	}

	vec2 st = jit_in.texcoord.st/u_resolution.xy;

	//50% performance increase if you DON'T USE a struct !!!!!	
	vec2	st_1[CNT],		st_2[CNT],		st_3[CNT],		st_4[CNT];
	float 	time_1[CNT],	time_2[CNT],	time_3[CNT],	time_4[CNT];

	
	float	mask_1,			mask_2,			mask_3,			mask_4 			= 0.0;
	vec3	color_1,		color_2,		color_3,		color_4			= vec3(0.0);
	
	
		//MAIN FOR LOOP
	for(int i=0;i < CNT; i++){
		
		vec4 item = vec4(0.0);
		
		if(mode == 1){
			item = texture(ADSRdata, vec2(float(i)+0.5,float(0)+0.5));
		
			time_1[i] = item.a;		//plane 0
			time_2[i] = item.x;
			time_3[i] = item.y;
			time_4[i] = item.z;
		
		} else if (mode == 0) {
			time_1[i] = t;
			time_2[i] = t;
			time_3[i] = t;
			time_4[i] = t;
		}
	
		
		if(layer1enabled) {		
			if(i < elements1){
			
		
			}		
		}
		
		
		if(layer2enabled) {
			if(i < elements2){
		
		
			}
		}
		
		
		if(layer3enabled) {
			if(i < elements3){
		

			}
		}

		if(layer4enabled) {
			if(i < elements4){
		

			}
		}


	} // END MAIN FOR
		
	//PLOT TESTING 
	float testCurve = pow(st.x,0.5);
	//testCurve = st.x*0.3;
		
	float pct = plot(st,testCurve);
	
	outColor = vec4(vec3(pct,0.0,0.0),1.0);
	
	
}	
]]>
		</program>
	</language>
</jittershader>

<jittershader name="thebookofshaders">
	<description>GL3 stub for thebookofshaders.com</description>
	<param name="jit_position" type="vec3" state="POSITION" />
	<param name="jit_texcoord" type="vec2" state="TEXCOORD" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="u_resolution" type="vec2" state="TEXDIM0" />
	<param name="u_mouse" type="vec2" default="0 0" />
    <param name="u_time" type="float" default="0" />
    <param name="ADSRdata" type="int" default="1" />
    <param name="mode" type="int" default="0" />
    <param name="elements1" type="int" default="4" />
    <param name="elements2" type="int" default="4" />
    <param name="elements3" type="int" default="4" />
    <param name="elements4" type="int" default="4" />
	    
	<param name="layerAngle1" type="float" default="0.0" />
	<param name="layer1enabled" type="bool" default="1" />
	<param name="c1" type="vec4" default="1. 0. 0. 1." />
	<param name="param1_1" type="float" default="0.45" />
	<param name="param1_2" type="float" default="0.25" />
	<param name="param1_3" type="float" default="0.0" />
	<param name="param1_4" type="float" default="0.0" />
	<param name="param1_5" type="float" default="0.0" />
	<param name="param1_6" type="float" default="0.0" />

	<param name="layerAngle2" type="float" default="0.0" />
	<param name="layer2enabled" type="bool" default="1" />
	<param name="c2" type="vec4" default="0. 1. 1. 1." />
	<param name="param2_1" type="float" default="0.16" />
	<param name="param2_2" type="float" default="0.23" />
	<param name="param2_3" type="float" default="0.0" />
	<param name="param2_4" type="float" default="0.0" />
	<param name="param2_5" type="float" default="0.0" />
	<param name="param2_6" type="float" default="0.0" />
	
	<param name="layerAngle3" type="float" default="0.0" />
	<param name="layer3enabled" type="bool" default="1" />
	<param name="c3" type="vec4" default="0. 1. 0. 1." />
	<param name="param3_1" type="float" default="0.15" />
	<param name="param3_2" type="float" default="0.3" />
	<param name="param3_3" type="float" default="0.0" />
	<param name="param3_4" type="float" default="0.0" />
	<param name="param3_5" type="float" default="0.0" />
	<param name="param3_6" type="float" default="0.0" />
	
	<param name="layerAngle4" type="float" default="0.0" />
	<param name="layer4enabled" type="bool" default="1" />
	<param name="c4" type="vec4" default="0. 0. 1. 1." />
	<param name="param4_1" type="float" default="0.15" />
	<param name="param4_2" type="float" default="0.4" />
	<param name="param4_3" type="float" default="0.0" />
	<param name="param4_4" type="float" default="0.0" />
	<param name="param4_5" type="float" default="0.0" />
	<param name="param4_6" type="float" default="0.0" />
	
	<language name="glsl" version="1.5">
		<bind param="jit_position" program="vp" />
		<bind param="jit_texcoord" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="u_resolution" program="fp" />
		<bind param="u_mouse" program="fp" />
		<bind param="u_time" program="fp" />
		<bind param="ADSRdata" program="fp" />
		<bind param="mode" program="fp" />
		<bind param="elements1" program="fp" />
		<bind param="elements2" program="fp" />
		<bind param="elements3" program="fp" />
		<bind param="elements4" program="fp" />
		
		<bind param="layerAngle1" program="fp" />
		<bind param="layer1enabled" program="fp" />
		<bind param="c1" program="fp" />
		<bind param="param1_1" program="vp" />
		<bind param="param1_2" program="vp" />
		<bind param="param1_3" program="vp" />
		<bind param="param1_4" program="vp" />
		<bind param="param1_5" program="vp" />
		<bind param="param1_6" program="vp" />		
		
		<bind param="layerAngle2" program="fp" />
		<bind param="layer2enabled" program="fp" />
		<bind param="c2" program="fp" />
		<bind param="param2_1" program="vp" />
		<bind param="param2_2" program="vp" />
		<bind param="param2_3" program="vp" />
		<bind param="param2_4" program="vp" />
		<bind param="param2_5" program="vp" />
		<bind param="param2_6" program="vp" />	
		
		<bind param="layerAngle3" program="fp" />
		<bind param="layer3enabled" program="fp" />
		<bind param="c3" program="fp" />
		<bind param="param3_1" program="vp" />
		<bind param="param3_2" program="vp" />
		<bind param="param3_3" program="vp" />
		<bind param="param3_4" program="vp" />
		<bind param="param3_5" program="vp" />
		<bind param="param3_6" program="vp" />

		<bind param="layerAngle4" program="fp" />
		<bind param="layer4enabled" program="fp" />
		<bind param="c4" program="fp" />
		<bind param="param4_1" program="vp" />
		<bind param="param4_2" program="vp" />
		<bind param="param4_3" program="vp" />
		<bind param="param4_4" program="vp" />
		<bind param="param4_5" program="vp" />
		<bind param="param4_6" program="vp" />

		
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 jit_position;
in vec2 jit_texcoord;
uniform mat4 textureMatrix0;
uniform mat4 modelViewProjectionMatrix;

out jit_PerVertex {
	vec2 texcoord;	
} jit_out;

void main() {	
	gl_Position = modelViewProjectionMatrix * vec4(jit_position, 1.);	
	jit_out.texcoord = vec2(textureMatrix0*vec4(jit_texcoord, 0., 1.));

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

#define CNT 16
#define PI 3.1459265358979
#define TWO_PI 6.28318530718
#define TAU PI * 2.0

in jit_PerVertex {
	vec2 texcoord;
} jit_in;

//main color out
//www.khronos.org/opengl/wiki/Layout_Qualifier_(GLSL)
layout (location = 0) out vec4 outColor;


//bookofshaders
uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

uniform sampler2DRect ADSRdata;
uniform int mode;

uniform int elements1;
uniform int elements2;
uniform int elements3;
uniform int elements4;

//track1
uniform float layerAngle1;
uniform bool layer1enabled;
uniform vec4 c1;
uniform float param1_1;				//0.0
uniform float param1_2;				//0.0
uniform float param1_3;				//0.0
uniform float param1_4;				//0.0	
uniform float param1_5;				//0.0
uniform float param1_6;				//0.0	

//track2
uniform float layerAngle2;
uniform bool layer2enabled;
uniform vec4 c2;
uniform float param2_1;				//0.0
uniform float param2_2;				//0.0
uniform float param2_3;				//0.0
uniform float param2_4;				//0.0	
uniform float param2_5;				//0.0
uniform float param2_6;				//0.0	

//track3
uniform float layerAngle3;
uniform bool layer3enabled;
uniform vec4 c3;
uniform float param3_1;				//0.0
uniform float param3_2;				//0.0
uniform float param3_3;				//0.0
uniform float param3_4;				//0.0	
uniform float param3_5;				//0.0
uniform float param3_6;				//0.0	

//track4
uniform float layerAngle4;
uniform bool layer4enabled;
uniform vec4 c4;
uniform float param4_1;				//0.0
uniform float param4_2;				//0.0
uniform float param4_3;				//0.0
uniform float param4_4;				//0.0	
uniform float param4_5;				//0.0
uniform float param4_6;				//0.0	

//FUNCTIONS
//========================================================================================

float linearstep(float begin, float end, float t) {
    return clamp((t - begin) / (end - begin), 0.0, 1.0);
}

float stroke(float x, float s, float w){
	float d = step(s, x+w * 0.5) - step(s, x - w * 0.5);
	return clamp(d,0.0,1.0);
}
	
float fill(float x, float size){
	return 1.0 - step(size, x);
}

float flip(float v, float pct){
	return mix(v,1.0-v,pct);
}

float circleSDF(vec2 st){
	return length(st-0.5)*2.0;
}

float raysSDF(vec2 st, int N){
	st -= 0.5;
	return fract(atan(st.y,st.x)/TAU*float(N));
}

float rectSDF(vec2 st, vec2 s) {
    st = st*2.-1.;
    return max( abs(st.x/s.x),
                abs(st.y/s.y) );
}

float hexSDF(vec2 st) {
    st = abs(st*2.-1.);
    return max(abs(st.y), st.x * 0.866025 + st.y * 0.5);
}

float polySDF(vec2 st, int V) {
    st = st*2.-1.;
    float a = atan(st.x,st.y)+PI;
    float r = length(st);
    float v = TAU/float(V);
    return cos(floor(.5+a/v)*v-a)*r;
}


float vesicaSDF(vec2 st, float w) {
    vec2 offset = vec2(w*.5,0.);
    return max( circleSDF(st-offset),
                circleSDF(st+offset));
}

float flowerSDF(vec2 st, int N) {
    st = st*2.-1.;
    float r = length(st)*2.;
    float a = atan(st.y,st.x);
    float v = float(N)*.5;
    return 1.-(abs(cos(a*v))*.5+.5)/r;
}

void rotateShape(inout vec2 _st, float a){
	_st = mat2( cos(a) , -sin(a), sin(a), cos(a) ) * (_st - 0.5);
	_st += 0.5;
}

vec2 rotate(vec2 st, float a){
	st = mat2( cos(a) , -sin(a), sin(a), cos(a) ) * (st - 0.5);
	return st + 0.5;
}

mat2 scale(vec2 _scale){
    return mat2(_scale.x,0.0,0.0,_scale.y);
}

float sinc( float x, float k){
    float a = PI*(k*x-1.0);
    return sin(a)/a;
}

//source: https://www.iquilezles.org/www/articles/functions/functions.htm
float pcurve( float x, float a, float b , float amp)
{
    float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));
    
    float curve = k * pow( x, a ) * pow( 1.0-x, b );
    return curve * amp;
}


//source: https://www.iquilezles.org/www/articles/functions/functions.htm
float expImpulse( float x, float k ){
	float h = k*x;
    return h*exp(0.0005-h);
}

float gain(float x, float k) 
{
    float a = 0.5*pow(2.0*((x<0.5)?x:1.0-x), k);
    return (x<0.5)?a:1.0-a;
}

float box(in vec2 _st, in vec2 _size){
    _size = vec2(0.5) - _size*0.5;
    vec2 uv = smoothstep(_size,
                        _size+vec2(0.001),
                        _st);
    uv *= smoothstep(_size,
                    _size+vec2(0.001),
                    vec2(1.0)-_st);
    return uv.x*uv.y;
}

float map(float n, float i1, float i2, float o1, float o2){
	return o1 + (n-i1)*(o2-i1)/(i2-i1);
	
}

vec2 scaleSDF(vec2 st, vec2 s) {
    return (st-.5)*s+.5;
}

void translateShape(inout vec2 _st, vec2 pos){
	_st += pos;
}


float triSDF(vec2 st) {
    st = (st*2.-1.)*2.;
    return max(abs(st.x) * 0.866025 + st.y * 0.5, -st.y * 0.5);
}


float plot(vec2 st, float pct){
  return  smoothstep( pct-0.02, pct, st.y) -
          smoothstep( pct, pct+0.02, st.y);
}


//TRACKS
//========================================================================================

float track1(inout vec2 _st, float time, float i){

	//modifiable params
	float thisAngle = 360.0/float(elements1);	


	//size
	float param1_1 = 0.45323;

	//distance from center
	float param1_2 = 0.23862;

	//orientation
	float param1_3 = 0.0;


	float thisSize = 1.0 * param1_1;
	float thisOffset = 1.0 * param1_2;
	float thisLocalAngle = 180.0 * param1_3;

	//SETUP TRANS and ROTATION
	float shape  = 0.0;
	rotateShape(_st,radians(thisAngle*i));
	translateShape(_st,vec2(0.0,thisOffset));
	rotateShape(_st,radians(thisLocalAngle));

	//min off
	if(time == 0.0){  
		shape = 0.0;
	}


	//ATTACK
	if(time > 0.0 && time < 0.25){

		float modT = linearstep(0.0,0.25,time);		
		float size = pow(modT,2.0)*thisSize;


		float comp1 = fill(circleSDF(_st),size);
		float comp2 = fill(circleSDF(_st),size/1.18895);
		float comp3 = fill(circleSDF(_st),size/1.25618);
		float comp4 = fill(circleSDF(_st),size/2.00312);

		rotateShape(_st,radians(0.0));

		float c5y = 0.03781*modT;
		float c5size = pow(modT,2.06753)*(thisSize*0.83568);
		float comp5 = fill(circleSDF(_st-vec2(0.000, c5y)),c5size);

		vec2 c61st = vec2(0.00, 0.090);
		float comp61 = stroke(vesicaSDF(_st+c61st,0.21541),size,0.07186); 
		vec2 c62st = vec2(0.000, 0.060);
		float comp62 = fill(vesicaSDF(_st+c62st,0.22409),size);  
		float comp6 = comp61 - comp62;

		shape = comp6 + comp1-comp2+comp3-comp4-comp5;

		float comp7 = circleSDF(_st);
		shape *= comp7;

		//isolate to test
		//shape = comp6;
	}


	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);
		float size = thisSize;	
		float pulse = pcurve( modT, 0.39203, 14.63839 , -0.19153);

		float size1 = size+pulse;
		float width1 = -0.97292*pulse;
		float comp1 = stroke(circleSDF(_st),size1,width1);

		vec2 c21st = vec2(0.000, 0.060);
		float comp21 = fill(vesicaSDF(_st+c21st,0.27523),size); 
		vec2 c22st = vec2(0.000, -0.050);
		float comp22 = fill(circleSDF(_st+c22st),0.21153);
		float comp2 = comp21 - comp22;

		shape = comp1 +comp2;

	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){

		float modT = linearstep(0.5,0.75,time);		
		float size = thisSize;

		vec2 c21st = vec2(0.000, 0.060);
		float comp21 = fill(vesicaSDF(_st+c21st,0.27523),size); 
		vec2 c22st = vec2(0.000, -0.050);
		float comp22 = fill(circleSDF(_st+c22st),0.21153);
		float comp2 = comp21 - comp22;

		shape = comp2;

	}

	//RELEASE
	if(time >= 0.75 && time < 1.0){

		float modT = linearstep(0.75,1.0,time);
		float size = pow(1.0-modT,4.0)*thisSize;


		vec2 c21st = vec2(0.000, 0.060);
		float comp21 = fill(vesicaSDF(_st+c21st,0.27523),size); 
		vec2 c22st = vec2(0.000, -0.050);
		float comp22 = fill(circleSDF(_st+c22st),0.21153);
		float comp2 = comp21 - comp22;

		shape = comp2;

	}

	//max off
	if(time == 1.0){  
		shape = 0.0;
	}

	return shape;


}




float track2(inout vec2 _st, float time, float i){

	//modifiable params
	float thisAngle = 360.0/float(elements2);	


	//size
	float param1_1 = 0.16806;

	//distance from center
	float param1_2 = 0.22597;

	//orientation
	float param1_3 = 0.0;


	float thisSize = 1.0 * param1_1;
	float thisOffset = 1.0 * param1_2;
	float thisLocalAngle = 180.0 * param1_3;

	//SETUP TRANS and ROTATION
	float shape  = 0.0;
	rotateShape(_st,radians(thisAngle*i));
	translateShape(_st,vec2(0.0,thisOffset));
	rotateShape(_st,radians(thisLocalAngle));

	//min off
	if(time == 0.0){  
		shape = 0.0;
	}


	//ATTACK
	if(time > 0.0 && time < 0.25){

		float modT = linearstep(0.0,0.25,time);		
		float size = pow(modT,2.0)*thisSize;

		float comp1 = fill(circleSDF(_st),size);

		float comp2 = circleSDF(_st);

		shape = comp1 * comp2;

		//isolate to test
		//shape = comp6;
	}


	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);
		float size = thisSize;	
		float pulse = pcurve( modT, 0.74407, 14.03691 , -0.20000);

		float size1 = size+pulse;
		float width1 = -1.94248*pulse;
		float comp1 = stroke(circleSDF(_st),size1,width1);

		float size2 = (thisSize * modT) * 0.33977;
		float curve2 = pow(modT,0.39512);
		float width2 = 0.07050 * curve2;
		float comp2 = stroke(circleSDF(_st),size2,width2);

		float size3 = modT * 0.03093;
		vec2 st3 = vec2(0.000, 0.150);
		float comp3 = fill(circleSDF(_st+st3),size3);

		shape = (comp1+comp2)+comp3;

		//TEST
		//shape = comp2;
	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){

		float modT = linearstep(0.5,0.75,time);		
		float size = thisSize;

		float comp1 = stroke(circleSDF(_st),size*0.33977,0.07960);

		float size3 = 0.03093;
		vec2 st3 = vec2(0.000, 0.150);
		float comp3 = fill(circleSDF(_st+st3),size3);

		shape = comp1 + comp3;

	}

	//RELEASE
	if(time >= 0.75 && time < 1.0){

		float modT = linearstep(0.75,1.0,time);
		float size1 = (pow(1.0-modT,4.0)*thisSize)*0.33977;
		float width1 = pow(1.0-modT,4.0)*0.07960;

		float comp1 = stroke(circleSDF(_st),size1,width1);
		shape = comp1;

	}

	//max off
	if(time == 1.0){  
		shape = 0.0;
	}

	return shape;

}


float track3(inout vec2 _st, float time, float i){
	
	//modifiable params
	float thisAngle = 360.0/float(elements3);	
	
	float thisSize = 1.0 * param3_1;
	float thisOffset = 1.0 * param3_2;
	float thisLocalAngle = 180.0 * param3_3;

	//SETUP TRANS and ROTATION
	float shape  = 0;
	rotateShape(_st,radians(thisAngle*i));
	translateShape(_st,vec2(0.0,thisOffset));
	rotateShape(_st,radians(thisLocalAngle));
	
	
	//ATTACK
	if(time >= 0.0 && time < 0.25){
	
		float modT = linearstep(0.0,0.25,time);		
		float size = pow(modT,4.0)*thisSize;
		
		shape = fill(polySDF(_st,3),size);

	}


	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);
		float size = thisSize;	
		float pulse = pcurve( modT, 0.8, 15.0 , 0.1);

		shape = stroke(polySDF(_st,3),size+pulse,0.02);
		
	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){
	
		float modT = linearstep(0.5,0.75,time);		
		float size = thisSize;

		shape = stroke(polySDF(_st,3),size,0.02);
		
	}

	//RELEASE
	if(time >= 0.75 && time <= 1.0){

		float modT = linearstep(0.75,1.0,time);
		float size = pow(1.0-modT,4.0)*thisSize;

		shape = stroke(polySDF(_st,3),size,0.02);

	}	
	
	return shape;
	
}


float track4(inout vec2 _st, float time, float i){

	//modifiable params
	float thisAngle = 360.0/float(elements4);	
	
	float thisSize = 1.0 * param4_1;
	float thisOffset = 1.0 * param4_2;
	float thisLocalAngle = 180.0 * param4_3;

	//SETUP TRANS and ROTATION
	float shape  = 0;
	rotateShape(_st,radians(thisAngle*i));
	translateShape(_st,vec2(0.0,thisOffset));
	rotateShape(_st,radians(thisLocalAngle));
	
	float baseShape = rectSDF(_st,vec2(1.0,2.0));
	
	
	//ATTACK
	if(time >= 0.0 && time < 0.25){
	
		float modT = linearstep(0.0,0.25,time);		
		float size = pow(modT,4.0)*thisSize;
		
		shape = fill(baseShape,size);

	}


	//DECAY
	if(time >= 0.25 && time < 0.5){

		float modT = linearstep(0.25,0.50,time);
		float size = thisSize;	
		float pulse = pcurve( modT, 0.8, 15.0 , 0.1);

		shape = stroke(baseShape,size+pulse,0.02);
		
	}

	//SUSTAIN
	if(time >= 0.5 && time < 0.75){
	
		float modT = linearstep(0.5,0.75,time);		
		float size = thisSize;

		shape = stroke(baseShape,size,0.02);
		
	}

	//RELEASE
	if(time >= 0.75 && time <= 1.0){

		float modT = linearstep(0.75,1.0,time);
		float size = pow(1.0-modT,4.0)*thisSize;

		shape = stroke(baseShape,size,0.02);

	}	
	
	return shape;

}

//MAIN
//========================================================================================

void main() {

	int animated = 0;
	
	float t;
	
	if(animated == 0){		
		t = fract(u_time / 04.0);
	} else {
		t = 0.0;
	}

	vec2 st = jit_in.texcoord.st/u_resolution.xy;

	//50% performance increase if you DON'T USE a struct !!!!!	
	vec2	st_1[CNT],		st_2[CNT],		st_3[CNT],		st_4[CNT];
	float 	time_1[CNT],	time_2[CNT],	time_3[CNT],	time_4[CNT];

	
	float	mask_1,			mask_2,			mask_3,			mask_4 			= 0.0;
	vec3	color_1,		color_2,		color_3,		color_4			= vec3(0.0);
	
	
		//MAIN FOR LOOP
	for(int i=0;i < CNT; i++){
		
		vec4 item = vec4(0.0);
		
		if(mode == 1){
			item = texture(ADSRdata, vec2(float(i)+0.5,float(0)+0.5));
		
			time_1[i] = item.a;		//plane 0
			time_2[i] = item.x;
			time_3[i] = item.y;
			time_4[i] = item.z;
		
		} else if (mode == 0) {
			time_1[i] = t;
			time_2[i] = t;
			time_3[i] = t;
			time_4[i] = t;
		}
	
		
		if(layer1enabled) {		
			if(i < elements1){
			//TRACK1
		
				st_1[i] = st;
				mask_1 += track1(st_1[i], time_1[i], float(i));
				color_1 = vec3(mask_1*c1.r,mask_1*c1.g,mask_1*c1.b);
		
			}		
		}
		
		
		if(layer2enabled) {
			if(i < elements2){
			//TRACK2
		
				st_2[i] = st;
				mask_2 += track2(st_2[i], time_2[i], float(i));
				color_2 = vec3(mask_2*c2.r,mask_2*c2.g,mask_2*c2.b);
		
			}
		}
		
		
		if(layer3enabled) {
			if(i < elements3){
		
				st_3[i] = st;
				mask_3 += track3(st_3[i], time_3[i], float(i));
				color_3 = vec3(mask_3*c3.r,mask_3*c3.g,mask_3*c3.b);

			}
		}

		if(layer4enabled) {
			if(i < elements4){
		
				st_4[i] = st;
				mask_4 += track4(st_4[i], time_4[i], float(i));
				color_4 = vec3(mask_4*c4.r,mask_4*c4.g,mask_4*c4.b);

			}
		}


	} // END MAIN FOR
		
	//vec3 mixLayerA = mix(color_1,color_2,mask_2-0.1);
	vec3 mixLayerA = max(color_1,color_2);
	vec3 mixLayerB = mix(color_3,mixLayerA,mask_3-0.6);
	
	vec3 mixLayerC = max(mixLayerA,mixLayerB);
	
	vec3 test = max(color_4,mixLayerC);
	
	//PLOT TESTING 
	float testCurve = pow(st.x,param1_6);
	//testCurve = st.x*0.3;
	
	
	float pct = plot(st,testCurve);
	test = (1.0-pct)*test+pct*vec3(1.0);
	
	
	
	outColor = vec4(test,1.0);
	

	
	
	
	//outColor = vec4(mixAB,1.0);
	

}	
]]>
		</program>
	</language>
</jittershader>

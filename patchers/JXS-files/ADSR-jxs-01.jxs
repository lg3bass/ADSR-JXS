<jittershader name="thebookofshaders">
	<description>GL3 stub for thebookofshaders.com</description>
	<param name="jit_position" type="vec3" state="POSITION" />
	<param name="jit_texcoord" type="vec2" state="TEXCOORD" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="u_resolution" type="vec2" state="TEXDIM0" />
	<param name="u_mouse" type="vec2" default="0 0" />
    <param name="u_time" type="float" default="0" />
	<language name="glsl" version="1.5">
		<bind param="jit_position" program="vp" />
		<bind param="jit_texcoord" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="modelViewProjectionMatrix" program="vp" />
		<bind param="u_resolution" program="fp" />
		<bind param="u_mouse" program="fp" />
		<bind param="u_time" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core

in vec3 jit_position;
in vec2 jit_texcoord;
uniform mat4 textureMatrix0;
uniform mat4 modelViewProjectionMatrix;

out jit_PerVertex {
	vec2 texcoord;	
} jit_out;

void main() {	
	gl_Position = modelViewProjectionMatrix * vec4(jit_position, 1.);	
	jit_out.texcoord = vec2(textureMatrix0*vec4(jit_texcoord, 0., 1.));

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

#define WHITE vec3(1.0)
#define BLACK vec3(0.0)
#define SWEETPEA vec3(1.0, 0.7, 0.75)
#define BLUE vec3(0.250, 0.215, 0.964)
#define REDORANGE vec3(0.964, 0.360, 0.215)
#define YELLOW vec3(0.972, 0.878, 0.125)


in jit_PerVertex {
	vec2 texcoord;
} jit_in;

//main color out
//www.khronos.org/opengl/wiki/Layout_Qualifier_(GLSL)
layout (location = 0) out vec4 outColor;


//bookofshaders
uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

void main() {
	
	
	//https://thebookofshaders.com/07/
		
	vec2 st = jit_in.texcoord.st/u_resolution.xy;
	st.x *= u_resolution.x/u_resolution.y;
  	vec3 color = vec3(0.0);
  	float d = 0.0;
	
	// Remap the space to -1. to 1.
	st = st *2.-1.;
	

	// Make the distance field
	d = length( abs(st)-.3 );
	// d = length( min(abs(st)-.3,0.) );
	// d = length( max(abs(st)-.3,0.) );
	
	
	outColor = vec4(vec3(fract(d*10.0)),1.0);

	// Drawing with the distance field
	//outColor = vec4(vec3( step(.3,d) ),1.0);
	//outColor = vec4(vec3( step(.3,d) * step(d,.4)),1.0);
	//outColor = vec4(vec3( smoothstep(.3,.4,d)* smoothstep(.6,.5,d)) ,1.0);

}	
]]>
		</program>
	</language>
</jittershader>
